// Normal Sieve

const int MX = 1e7 + 123;
bool isPrime[MX];
vector<int> primes;

void primeGen (int n){
    for(int i = 3; i <= n; i += 2)
        isPrime[i] = 1;
    int sq = sqrt(n);

    for(int i = 3; i <= sq; i += 2){
        if(isPrime[i]){
            for(int j = (i * i); j <= n; j += (i + i)){
                isPrime[j] = 0;
            }
        }
    }
    isPrime[2] = 1;
    primes.push_back(2);
    for(int i = 3; i <= n; i += 2){
        if(isPrime[i])
            primes.push_back(i);
    }
}

// Bitset Sieve (Best PrimeGen Algorithm)
// time complexity of this Algorithm is almost O(n log (log n));

const int MX = 1e7 + 123;
bitset<MX> isPrime;
vector<int> primes;

void primeGen (int n){
    for(int i = 3; i <= n; i += 2)
        isPrime[i] = 1;
    int sq = sqrt(n);

    for(int i = 3; i <= sq; i += 2){
        if(isPrime[i]){
            for(int j = (i * i); j <= n; j += (i + i)){
                isPrime[j] = 0;
            }
        }
    }
    isPrime[2] = 1;
    primes.push_back(2);
    for(int i = 3; i <= n; i += 2){
        if(isPrime[i])
            primes.push_back(i);
    }
}